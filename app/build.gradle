apply plugin: 'com.android.application'

android {
    compileSdkVersion gradle.ext.compileSdkVersion
    buildToolsVersion gradle.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.gradle.task.demo"
        minSdkVersion gradle.ext.minSdkVersion
        targetSdkVersion gradle.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [host_name:"www.defaultConfig.com"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            resValue("string","string_key","hello android")
            resValue("bool","bool_is_boy","true")
            resValue("integer","integer_age","12")

            applicationIdSuffix ".debug"
            debuggable true
            manifestPlaceholders = [host_name:"www.debug.com"]
        }

        staging {
            initWith debug
            manifestPlaceholders = [host_name:"www.staging.com"]
            applicationIdSuffix ".debugStaging"
        }
    }

//    splits {
//        density {
//            enable true
//            exclude "ldpi", "xhdpi", "xxxhdpi","mdpi"
//        }
//
//        abi {
//            enable true
//            include "x86"
//            exclude "x86_64","arm64-v8a"
//        }
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}

//打印task的输入和输出
gradle.taskGraph.afterTask { task ->
    try {
        println("========================START==============================")
        println "taskName:${task.name}"

        task.inputs.files.each { file ->
            println 'input:' + file.absolutePath
        }

        println '========================================================='
        task.outputs.files.each { file ->
            println 'output:' + file.absolutePath
        }
        println("========================END==============================")
    } catch (Exception e) {
        e.printStackTrace()
    }
}