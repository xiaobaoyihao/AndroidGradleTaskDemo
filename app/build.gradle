apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "org.test.task"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}

// 打印task的输入和输出
def printTaskInputsOutputs(String taskName) {
    def realTask = project.tasks.findByName(taskName)

    if (realTask) {
        println 'find ' + taskName + ' task -----------------------'

        realTask.doLast {
            realTask.inputs.files.each { fileTemp ->
                println 'input file:' + fileTemp.absolutePath
            }

            println '---------------------------------------------------'
            realTask.outputs.files.each { fileTemp ->
                println 'output file:' + fileTemp.absolutePath
            }
        }
    }
}

project.afterEvaluate {
    def tasks = ['preDebugBuild',
                 'compileDebugAidl',
                 'compileDebugRenderscript',
                 'checkDebugManifest',
                 'generateDebugBuildConfig',
                 'prepareLintJar',
                 'generateDebugResValues',
                 'generateDebugResources',
                 'mergeDebugResources',
                 'createDebugCompatibleScreenManifests',
                 'processDebugManifest',
                 'splitsDiscoveryTaskDebug',
                 'processDebugResources',
                 'generateDebugSources',
                 'javaPreCompileDebug',
                 'compileDebugJavaWithJavac',
                 'compileDebugNdk',
                 'compileDebugSources',
                 'mergeDebugShaders',
                 'compileDebugShaders',
                 'generateDebugAssets',
                 'mergeDebugAssets',
                 'transformClassesWithDexBuilderForDebug',
                 'transformDexArchiveWithExternalLibsDexMergerForDebug',
                 'transformDexArchiveWithDexMergerForDebug',
                 'mergeDebugJniLibFolders',
                 'transformNativeLibsWithMergeJniLibsForDebug',
                 'processDebugJavaRes',
                 'transformResourcesWithMergeJavaResForDebug',
                 'validateSigningDebug',
                 'packageDebug',
                 'assembleDebug'
    ]
    for (String taskName : tasks) {
        printTaskInputsOutputs(taskName)
    }
}
